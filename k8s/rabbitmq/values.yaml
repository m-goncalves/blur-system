## Bitnami RabbitMQ chart
## ref: https://github.com/bitnami/charts/tree/master/bitnami/rabbitmq
image:
  registry: docker.io
  repository: bitnami/rabbitmq
  tag: 3.8.9-debian-10-r37
  debug: false
  pullPolicy: IfNotPresent
clusterDomain: cluster.local
auth:
  username: user
  existingPasswordSecret: rabbit
  existingErlangSecret: rabbit
  tls:
    enabled: false
    failIfNoPeerCert: true
    sslOptionsVerify: verify_peer
    caCertificate: |-
    serverCertificate: |-
    serverKey: |-
    # existingSecret: name-of-existing-secret-to-rabbitmq
logs: '-'
ulimitNofiles: '65536'
memoryHighWatermark:
  enabled: true
  type: 'relative'
  value: 0.4
plugins: 'rabbitmq_management rabbitmq_peer_discovery_k8s'
extraPlugins: 'rabbitmq_auth_backend_ldap'
clustering:
  addressType: hostname
  rebalance: false
  forceBoot: true
loadDefinition:
  enabled: false
terminationGracePeriodSeconds: 120
extraEnvVars: []
extraContainerPorts: []
configuration: |-
  ## Username and password
  default_user = {{ .Values.auth.username }}
  default_pass = {{ .Values.auth.username }}
  ## Clustering
  cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
  cluster_formation.k8s.host = kubernetes.default.svc.{{ .Values.clusterDomain }}
  cluster_formation.node_cleanup.interval = 10
  cluster_formation.node_cleanup.only_log_warning = true
  cluster_partition_handling = autoheal
  # queue master locator
  queue_master_locator = min-masters
  # enable guest user
  loopback_users.guest = false
  {{ tpl .Values.extraConfiguration . }}
  {{- if .Values.auth.tls.enabled }}
  ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}
  listeners.ssl.default = {{ .Values.service.tlsPort }}
  ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}
  ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
  ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
  ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
  {{- end }}
  {{- if .Values.ldap.enabled }}
  auth_backends.1 = rabbit_auth_backend_ldap
  auth_backends.2 = internal
  {{- range $index, $server := .Values.ldap.servers }}
  auth_ldap.servers.{{ add $index 1 }} = {{ $server }}
  {{- end }}  auth_ldap.port = {{ .Values.ldap.port }}
  auth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}
  {{- if .Values.ldap.tls.enabled }}
  auth_ldap.use_ssl = true
  {{- end }}
  {{- end }}
  {{- if .Values.metrics.enabled }}
  ## Prometheus metrics
  prometheus.tcp.port = 9419
  {{- end }}
  {{- if .Values.memoryHighWatermark.enabled }}
  ## Memory Threshold
  total_memory_available_override_value = {{ include "rabbitmq.toBytes" .Values.resources.limits.memory }}
  vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}
  {{- end }}
extraConfiguration: |-
  #default_vhost = {{ .Release.Namespace }}-vhost
  #disk_free_limit.absolute = 50MB
  #load_definitions = /app/load_definition.json
advancedConfiguration: |-
ldap:
  enabled: false
  servers: []
  port: '389'
  user_dn_pattern: cn=${username},dc=example,dc=org
  tls:
    enabled: false
extraVolumeMounts: []
extraVolumes: []
extraSecrets: {}
replicaCount: 2
podManagementPolicy: OrderedReady
podAntiAffinityPreset: soft
podSecurityContext:
  fsGroup: 1001
  runAsUser: 1001
resources:
  limits:
    cpu: 250m
    memory: 500Mi
  requests:
    cpu: 250m
    memory: 500Mi
livenessProbe:
  enabled: true
  initialDelaySeconds: 120
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 3
  successThreshold: 1
serviceAccount:
  create: true
rbac:
  create: true
persistence:
  enabled: true
  selector: {}
  accessMode: ReadWriteOnce
  size: 1Gi
  volumes:
pdb:
  create: true
  ## Min number of pods that must still be available after the eviction
  minAvailable: 1
networkPolicy:
  enabled: true
  allowExternal: false
service:
  type: ClusterIP
  port: 5672
  portName: amqp
  tlsPort: 5671
  tlsPortName: amqp-ssl
  distPort: 25672
  distPortName: dist
  managerPort: 15672
  managerPortName: http-stats
  metricsPort: 9419
  epmdPortName: epmd
ingress:
  enabled: false
  path: /
  certManager: false
  hostname: rabbitmq.local
  tls: false
  secrets: []
metrics:
  enabled: true
  plugins: 'rabbitmq_prometheus'
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '{{ .Values.service.metricsPort }}'
## Prometheus Service Monitor
## ref: https://github.com/coreos/prometheus-operator
  serviceMonitor:
    enabled: true
    interval: 30s
    honorLabels: false
    release: "prometheus-operator"
    additionalLabels:
      release: "prometheus-operator"
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: 'default'
  ## List of rules, used as template by Helm.
    rules:
      - alert: RabbitmqDown
        expr: rabbitmq_up{service="{{ template "rabbitmq.fullname" . }}"} == 0
        for: 5m
        labels:
          severity: error
        annotations:
          summary: Rabbitmq down (instance {{ "{{ $labels.instance }}" }})
          description: RabbitMQ node down
    rules: []
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/minideb
    tag: buster
    pullPolicy: Always
    pullSecrets: []
  resources:
    limits: {}
    #   cpu: 100m
    #   memory: 128Mi
    requests: {}
    #   cpu: 100m
    #   memory: 128Mi